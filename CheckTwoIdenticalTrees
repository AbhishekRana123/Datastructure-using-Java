class Node 
{
	int data;
   	Node left;
    	Node right;
	
	Node(int data)
	{
		this.data = data;
		left = null;
		right = null;
	}
}
class FindIdenticalTree
{
	public static void main(String arg[])
	{
		
		//Tree 1
		Node root1 = new Node(20);

		root1.left = new Node(10);
		root1.right = new Node(30);
	
		root1.left.left = new Node(5);
		root1.left.right = new Node(15);
	
		root1.right.left = new Node(25);	
		root1.right.right = new Node(35);
		
		root1.left.left.right = new Node(7);
	
		root1.left.right.left = new Node(13);
		root1.left.right.right = new Node(18);
		
		//Tree 2
		Node root2 = new Node(20);

		root2.left = new Node(10);
		root2.right = new Node(30);
	
		root2.left.left = new Node(5);
		root2.left.right = new Node(15);
	
		root2.right.left = new Node(25);	
		root2.right.right = new Node(35);
		
		root2.left.left.right = new Node(7);
	
		root2.left.right.left = new Node(13);
		root2.left.right.right = new Node(18);

		
		
		if(identical(root1,root2))
		{
			System.out.println("Two Trees are Identical");
		}
		else
		{
			System.out.println("Two Trees not are Identical");
		}
	}
	
	public static boolean identical(Node a,Node b)
	{
		if((a==null)&&(b == null))
		{
			return true;
		}
		else if(a != null && b != null)
		{
			return ((a.data == b.data) && identical(a.left,b.left) && identical(a.right,b.right));
		}
		else 
			return false;
	}
}
